@using SimpleNET8DragAndDropWASM.Models
<div class="jobs-container">
    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
</div>

@code {
    [Parameter] public List<JobModel> Jobs { get; set; } = [];
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public EventCallback<JobModel?> OnStatusUpdated { get; set; }

    public JobModel? Payload { get; set; }
    public JobModel? TargetJob { get; set; }
    public JobStatuses? ActiveDragList { get; set; }

    public async Task UpdateJobAsync(JobStatuses newStatus)
    {
        if (Payload is not { }) return;
        
        JobModel? task = Jobs.SingleOrDefault(x => x.Id == Payload.Id);

        if (task != null)
        {
            task.Status = newStatus;
            task.LastUpdated = DateTime.Now;
            
            // Assign to the last position in the new status list by default
            int maxOrder = Jobs.Where(x => x.Status == newStatus).Any() ? 
                Jobs.Where(x => x.Status == newStatus).Max(x => x.Order) : 0;
            task.Order = maxOrder + 1;
            
            await OnStatusUpdated.InvokeAsync(Payload);
        }
    }
    
    public async Task ReorderJobInSameListAsync(JobModel targetJob, bool insertBefore)
    {
        if (Payload is not { } || targetJob.Id == Payload.Id) return;
        
        // Only reorder if in the same list
        if (Payload.Status != targetJob.Status) return;
        
        JobModel? sourceJob = Jobs.SingleOrDefault(x => x.Id == Payload.Id);
        
        if (sourceJob != null)
        {
            int sourceOrder = sourceJob.Order;
            int targetOrder = targetJob.Order;

            // Check if we're trying to move between adjacent items where no change is needed
            if (sourceOrder == targetOrder - 1 && insertBefore) return;
            if (sourceOrder == targetOrder + 1 && !insertBefore) return;

            // Adjust target order based on whether we're inserting before or after
            if (!insertBefore)
            {
                targetOrder++;
            }
            
            // Skip if target position is the same as current position
            if (sourceOrder == targetOrder) return;
            
            // Determine if we're moving up or down in the list
            if (sourceOrder < targetOrder)
            {
                // Moving down - shift all jobs between source and target up
                foreach (var job in Jobs.Where(x => x.Status == sourceJob.Status && 
                                                  x.Order > sourceOrder && 
                                                  x.Order < targetOrder))
                {
                    job.Order--;
                    job.LastUpdated = DateTime.Now;
                }
            }
            else
            {
                // Moving up - shift all jobs between target and source down
                foreach (var job in Jobs.Where(x => x.Status == sourceJob.Status && 
                                                  x.Order >= targetOrder && 
                                                  x.Order < sourceOrder))
                {
                    job.Order++;
                    job.LastUpdated = DateTime.Now;
                }
            }
            
            // Place source at target position
            sourceJob.Order = targetOrder;
            sourceJob.LastUpdated = DateTime.Now;
            await OnStatusUpdated.InvokeAsync(sourceJob);
        }
    }
}
