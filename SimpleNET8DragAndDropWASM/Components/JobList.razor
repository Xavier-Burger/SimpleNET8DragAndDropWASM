@using SimpleNET8DragAndDropWASM.Models
<div class="job-status">
    <h3>@ListStatus (@_jobs.Count())</h3>

    <ul class="dropzone @_dropClass"
        ondragover="event.preventDefault();"
        ondragstart="event.dataTransfer.setData('', event.target.id);"
        @ondrop="HandleDrop"
        @ondragenter="HandleDragEnter"
        @ondragleave="HandleDragLeave">

        @foreach (var job in _jobs.OrderBy(j => j.Order))
        {
            <Job JobModel="job" />
        }

    </ul>
</div>

@code {

    [CascadingParameter] JobsContainer Container { get; set; } = null!;
    [Parameter] public JobStatuses ListStatus { get; set; } = JobStatuses.Todo;
    [Parameter] public JobStatuses[] AllowedStatuses { get; set; } = [];

    List<JobModel> _jobs = new List<JobModel>();
    string _dropClass = "";

    protected override void OnParametersSet()
    {
        _jobs.Clear();
        _jobs.AddRange(Container.Jobs.Where(x => x.Status == ListStatus));
    }

    private void HandleDragEnter()
    {
        if (Container.Payload is not {}) return;
        
        // Check if the job is from a different list
        if (Container.Payload.Status != ListStatus)
        {
            _dropClass = !AllowedStatuses.Contains(Container.Payload.Status) ? "no-drop" : "can-drop";
        }
        else
        {
            // This is for reordering within the same list
            _dropClass = "reordering";
        }
    }

    private void HandleDragLeave()
    {
        _dropClass = "";
    }

    private async Task HandleDrop()
    {
        _dropClass = "";

        if (Container.Payload is null) return;

        // If the drag is between different lists
        if (Container.Payload.Status != ListStatus)
        {
            if (!AllowedStatuses.Contains(Container.Payload.Status)) return;
            await Container.UpdateJobAsync(ListStatus);
            return;
        }
        
        // If dragged onto the empty part of the list or if no target is set
        // add to the end of the list
        if (Container.TargetJob is null || Container.TargetJob.Status != ListStatus)
        {
            JobModel? sourceJob = Container.Jobs.SingleOrDefault(x => x.Id == Container.Payload.Id);
            if (sourceJob != null)
            {
                // Find the maximum order in this list
                int maxOrder = _jobs.Any() ? _jobs.Max(j => j.Order) : 0;
                
                // Only update if we're not already at the end
                if (sourceJob.Order != maxOrder)
                {
                    // First remove the job from its current position
                    foreach (var job in Container.Jobs.Where(x => x.Status == ListStatus && 
                                                              x.Order > sourceJob.Order))
                    {
                        job.Order--;
                    }
                    
                    // Place at the end
                    sourceJob.Order = maxOrder;
                    sourceJob.LastUpdated = DateTime.Now;
                    await Container.OnStatusUpdated.InvokeAsync(sourceJob);
                }
            }
        }
    }
}
